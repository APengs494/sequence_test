#include <stdio.h>

#define N  100
#define M  100

int printfGL(char b[N][M],char v[N],char w[M],int i,int j)//根据存储的回溯信息，递归重构联配
{
	if(i<=-1&&j>=0)//第一个字符即存在插入
	{
		printf("-  %c\n",w[j]);
		return 0;
	}
	if(i>=0&&j<=-1)//第一个字符即存在删除
	{
		printf("%c  -\n",v[i]);	
		return 0;
	}
	if(i<=-1&&j<=-1)
		return 0;
	if(b[i+1][j+1]=='\\'||	b[i][j] == '/')//匹配或错配
	{
		printfGL(b,v,w,i-1,j-1);
		printf("%c  %c\n",v[i],w[j]);
	}
	else if(b[i+1][j+1]=='^')//删除
	{
		printfGL(b,v,w,i-1,j);
		printf("%c  -\n",v[i]);	
	}	
	else//插入
	{
  		printfGL(b,v,w,i,j-1);
		printf("-  %c\n",w[j]);
	}	
	return 0;
}
void main()
{
	char v[N],w[M];
	int s[N][M];
	char b[N][M];
	int i,j,t=0;
	int n,m;
	int sum1,sum2,sum3;
	printf("请输入第一个字符串的长度：\n");
	scanf("%d",&n);
	printf("请循环输入第一个字符串:\n");
	getchar();
	for(i=0;i<n;i=i+1)
	{
		scanf("%c",&v[i]);
	}
	printf("请输入第二个字符串的长度：\n");
	scanf("%d",&m);
	printf("请循环输入第二个字符串:\n");
	getchar();
	for(j=0;j<m;j=j+1)
	{
		scanf("%c",&w[j]);
	}
	
	s[0][0] = 0;
	sum1 = s[0][0];

	for(i=1;i<=n;i++)//动态规划第一列得分矩阵
		s[i][0] = -i;
	for(j=1;j<=m;j++)//动态规划第一行得分矩阵
		s[0][j] = -j;
/*
* 计算联配得分矩阵，并存储回溯信息	
*/
	for(i=1;i<n;i++)
	{
		for(j=1;j<m;j++)
		{
			if(v[i-1]==w[j-1])
			{
				sum1 = s[i-1][j-1] + 1;
			}
			else
				sum1 = s[i-1][j-1] - 2;
			sum2 = s[i-1][j] - 1;
			sum3 = s[i][j-1] - 1;
			sum1 = sum1<sum2?sum2:sum1;
			sum1 = sum1<sum3?sum3:sum1;
			s[i][j] = sum1;
			if(sum1==sum2)
				b[i][j] = '^';//用'^'代表向上的箭头
			else if(sum1==sum3)
				b[i][j] = '<';//用'<'代表向左的箭头
			else if(sum1 == s[i-1][j-1] + 1)
				b[i][j] = '\\';//用'\'代表斜上的箭头（'\\'是'\'的转义字符）
			else
				b[i][j] = '/';//错配
		}
	}
	printf("全局序列联配：\n");
	printfGL(b,v,w,n-2,m-2);//根据回溯信息，递归重构联配
}